name: CI - Build and Test

on:
  # Triggers on pull requests to main branch
  pull_request:
    branches: [ main ]
  
  # Also run on pushes to main (but not deploy)
  push:
    branches: [ main ]

# Cancel previous runs if a new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Lint and build job
  lint-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .vite
            node_modules/.cache
          key: ${{ runner.os }}-vite-ci-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-vite-ci-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Run ESLint
        run: ${{ steps.detect-package-manager.outputs.manager }} run lint

      - name: Type check
        run: ${{ steps.detect-package-manager.outputs.runner }} tsc --noEmit

      - name: Build application
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
        env:
          VITE_BASE_PATH: /

      - name: Check build artifacts
        run: |
          echo "Build completed successfully!"
          echo "Generated files:"
          find dist -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10
